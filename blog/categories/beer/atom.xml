<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Beer | Scott Smith]]></title>
  <link href="http://scottksmith.com/blog/categories/beer/atom.xml" rel="self"/>
  <link href="http://scottksmith.com/"/>
  <updated>2017-04-01T19:09:20-07:00</updated>
  <id>http://scottksmith.com/</id>
  <author>
    <name><![CDATA[Scott Smith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beer Locker: Building a RESTful API with Node - Username &amp; Password]]></title>
    <link href="http://scottksmith.com/blog/2014/09/18/beer-locker-building-a-restful-api-with-node-username-and-password/"/>
    <updated>2014-09-18T20:31:00-07:00</updated>
    <id>http://scottksmith.com/blog/2014/09/18/beer-locker-building-a-restful-api-with-node-username-and-password</id>
    <content type="html"><![CDATA[<p>Welcome to part 6 of the Beer Locker series</p>

<ol>
<li><a href="/blog/2014/05/02/building-restful-apis-with-node/">Getting started</a></li>
<li><a href="/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud/">CRUD</a></li>
<li><a href="/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport/">Passport</a></li>
<li><a href="/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server/">OAuth2 Server</a></li>
<li><a href="/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest/">Digest</a></li>
<li><a href="/blog/2014/09/18/beer-locker-building-a-restful-api-with-node-username-and-password/">Username &amp; Password</a></li>
</ol>


<p>In our <a href="/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest/">previous article</a> we explored implementing Digest authentication in place of Basic. This article will now delve into implementing username and password authentication using the <a href="https://github.com/jaredhanson/passport-local">passport-local</a> module.</p>

<!-- more -->


<p>There is a new set of code this article will start from rather than where we left off in the previous article. The previous article required us to remove our password hashing which we don't have to do for username/password. You can find the starting point of code <a href="https://github.com/scottksmith95/beerlocker/tree/master/beerlocker-6.1">here on GitHub</a>.</p>

<p>The only difference here is that we added back password hashing and verification along with using Basic instead of Digest for our authentication. The Digest strategy implementation is still there but isn't being used.</p>

<h2>Username and Password</h2>

<p>One of the most widely used authentication mechanism on the web is via a username and password submitted in a POST request or in the query string.</p>

<p>This authentication mechansim can be used for APIs but it requires submitting the credentials on each call. You could implement session state for your API but it technically goes against REST being stateless. By session state, I mean making a direct login type call with the username and password and getting back some form of session id. This session id can then be transmitted on each API call to allow the server to verify the authenticated user.</p>

<h2>Update our Auth Controller</h2>

<p>To get started with the <code>passport-local</code> module (Local) we need to install it using npm.</p>

<p><code>tcsh
npm install passport-local --save
</code></p>

<p>The next thing we need to do is update our Auth Controller. Open <code>controllers/auth.js</code> and implement the Local strategy as follows.</p>

<p>```javascript
// Load required packages
var LocalStrategy = require('passport-local').Strategy;</p>

<p>...</p>

<p>passport.use(new LocalStrategy(
  function(username, password, callback) {</p>

<pre><code>User.findOne({ username: username }, function (err, user) {
  if (err) { return callback(err); }

  // No user found with that username
  if (!user) { return callback(null, false); }

  // Make sure the password is correct
  user.verifyPassword(password, function(err, isMatch) {
    if (err) { return callback(err); }

    // Password did not match
    if (!isMatch) { return callback(null, false); }

    // Success
    return callback(null, user);
  });
});
</code></pre>

<p>  }
));</p>

<p>...</p>

<p>exports.isAuthenticated = passport.authenticate(['local', 'bearer'], { session : false });
```</p>

<p>We have done 3 main things here.</p>

<p>First, we required the LocalStrategy provided by the <code>passport-local</code> module.</p>

<p>Second, we told Passport to use LocalStrategy. If you are paying close attention, you will notice that the strategy implementation for Local is the same as Basic. This is because we are essentially working with usernames and passwords for both strategies. The main difference here is that the Basic strategy is pulling the username and password out of the Authorization header. Local allows us to submit the username and password via POST data or within the query string.</p>

<p>Third, we updated <code>isAuthenticated</code> to use local instead of basic.</p>

<h2>Test it using query strings</h2>

<p>Yep, you heard me right. We are ready to test out this implementation.</p>

<p>The first way we can test out our new authentication is through the use of query strings. You are welecome to test this using any of the endpoints in our API. I am going to use <code>http://localhost:3000/api/beers/</code>.</p>

<p>Because we are using query strings, it is very simple to test this using a web browser.</p>

<p>Here is what I am using to test:</p>

<p><code>http
http://localhost:3000/api/beers/?username=denver&amp;password=rocks
</code></p>

<p>If you implemented everything correctly, you should get back a list of beer for the authentication user.</p>

<h2>Test it using POST data</h2>

<p>The next test we can do is using POST data rather than query strings.</p>

<p>This is where things break down a little bit when you don't have session state. In calls where we are POSTing, a username and password could be added. But we would be adding them along with other data we are submitting to in the POST. For exampe, when we are adding new beer to our locker, we would be posting beer name, type, and quantity. But we would also be posting a username and password. Also to note that this method only works for POST and PUT. We cannot submit data with GET or DELETE requests.</p>

<p>Here is an example where I am adding a new beer to my locker using Postman.</p>

<p><img src="/images/postman14.png" alt="Testing POST with Postman" /></p>

<h2>Customize our implementation</h2>

<p>As noted before, the Local Strategy is looking to find the credentials in the body or query string parameters named 'username' and 'password'. But what if you want to name them something else? You are in luck because you can configure it to specify the name to use for both username and password. This is done by passing in an options object when defining the LocalStrategy.</p>

<p>Open up <code>controllers/auth.js</code> and update it to look like this:</p>

<p>```javascript
...</p>

<p>passport.use(new LocalStrategy({</p>

<pre><code>usernameField: 'email',
passwordField: 'pass'
</code></pre>

<p>  },
  function(username, password, callback) {</p>

<pre><code>User.findOne({ username: username }, function (err, user) {
  if (err) { return callback(err); }

  // No user found with that username
  if (!user) { return callback(null, false); }

  // Make sure the password is correct
  user.verifyPassword(password, function(err, isMatch) {
    if (err) { return callback(err); }

    // Password did not match
    if (!isMatch) { return callback(null, false); }

    // Success
    return callback(null, user);
  });
});
</code></pre>

<p>  }
));</p>

<p>...
```</p>

<p>What this does is tell the LocalStrategy to look for the named parameter 'email' for the username and 'pass' for the password.</p>

<h2>Wrap up</h2>

<p>You now have the tools needed to implement username and password authentication.</p>

<p>As stated before, this type of authentication may not make the most sense for a RESTful API. Of the two, query string makes more sense but it is still risky because you are sending the username and password within the URL. Even over an HTTPS connection, it makes it potentially more visible to someone 'watching over your shoulder', browser history, etc.</p>

<p>Hopefully this shows you how to use this strategy in other situations such as a web UI with a login form.</p>

<p>I have a lot more tutorials coming so be sure to <a href="http://scottksmith.com/atom.xml">subscribe to my RSS feed</a> or <a href="https://twitter.com/scottksmith95">follow me on Twitter</a>. Also, if there are certain topics you would like me to write on, feel free to leave comments and let me know.</p>

<p>Source code for this part can be found <a href="https://github.com/scottksmith95/beerlocker/tree/master/beerlocker-6.2">here on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beer Locker: Building a RESTful API with Node - Digest]]></title>
    <link href="http://scottksmith.com/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest/"/>
    <updated>2014-09-14T13:28:00-07:00</updated>
    <id>http://scottksmith.com/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest</id>
    <content type="html"><![CDATA[<p>Welcome to part 5 of the Beer Locker series</p>

<ol>
<li><a href="/blog/2014/05/02/building-restful-apis-with-node/">Getting started</a></li>
<li><a href="/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud/">CRUD</a></li>
<li><a href="/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport/">Passport</a></li>
<li><a href="/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server/">OAuth2 Server</a></li>
<li><a href="/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest/">Digest</a></li>
<li><a href="/blog/2014/09/18/beer-locker-building-a-restful-api-with-node-username-and-password/">Username &amp; Password</a></li>
</ol>


<p>In our <a href="/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server/">previous article</a> we ended wtih a functional API capable of creating user accounts, locking down API endpoints, only allowing access to a user's own beer locker, and an OAuth2 server.</p>

<p>Many readers have asked questions about how to use different authentication strategies so I am going to continue this series and delve into many of those strategies.</p>

<p>This article will explore the use of Digest authentication instead of Basic.</p>

<!-- more -->


<h2>Digest</h2>

<p>Like the Basic scheme, Digest uses a username and password to authenticate a user. The benefit it provides over Basic is that it uses a challenge-response paradigm to avoid sending the password in the clear.</p>

<p>Here is how it works:</p>

<ol>
<li>Client sends an unauthenticated request to a server.</li>
<li>Server responds with a 401 "Unauthorized" reponse code along with a special code (called a nonce) and another string representing the authentication realm.</li>
<li>Client responds with the nonce and an encrypted version of the username, password and realm.</li>
<li>Server responds with a 200 OK and the response data if the authentication passes.</li>
</ol>


<h2>Update our Routes</h2>

<p>There is something odd going on with the way in which we defined our routes in the original tutorials. In most cases it isn't an issue but it is for Digest auth. When we tell Express to use our router, we were prefixing it with <code>/api</code>. The problem is that Digest auth uses the URI as part of the scheme and the request object within Express is seeing it without the <code>/api</code> portion of the URI. This will cause authentication to fail. You will need to update <code>server.js</code> routes like this:</p>

<p>```javascript
...</p>

<p>// Create endpoint handlers for /beers
router.route('/api/beers')
  .post(authController.isAuthenticated, beerController.postBeers)
  .get(authController.isAuthenticated, beerController.getBeers);</p>

<p>// Create endpoint handlers for /beers/:beer_id
router.route('/api/beers/:beer_id')
  .get(authController.isAuthenticated, beerController.getBeer)
  .put(authController.isAuthenticated, beerController.putBeer)
  .delete(authController.isAuthenticated, beerController.deleteBeer);</p>

<p>// Create endpoint handlers for /users
router.route('/api/users')
  .post(userController.postUsers)
  .get(authController.isAuthenticated, userController.getUsers);</p>

<p>// Create endpoint handlers for /clients
router.route('/api/clients')
  .post(authController.isAuthenticated, clientController.postClients)
  .get(authController.isAuthenticated, clientController.getClients);</p>

<p>// Create endpoint handlers for oauth2 authorize
router.route('/api/oauth2/authorize')
  .get(authController.isAuthenticated, oauth2Controller.authorization)
  .post(authController.isAuthenticated, oauth2Controller.decision);</p>

<p>// Create endpoint handlers for oauth2 token
router.route('/api/oauth2/token')
  .post(authController.isClientAuthenticated, oauth2Controller.token);</p>

<p>// Register all our routes
app.use(router);</p>

<p>...
```</p>

<h2>Update our Auth Controller</h2>

<p>The first thing we need to do is update our Auth Controller. Open <code>controllers/auth.js</code> and implement the Digest strategy as follows. You can leave the Basic auth strategy implementation if you want. We will be updating the <code>isAuthenticated</code> to use Digest instead of Basic.</p>

<p>```javascript
// Load required packages
var DigestStrategy = require('passport-http').DigestStrategy;</p>

<p>...</p>

<p>passport.use(new DigestStrategy(
  { qop: 'auth' },
  function(username, callback) {</p>

<pre><code>User.findOne({ username: username }, function (err, user) {
  if (err) { return callback(err); }

  // No user found with that username
  if (!user) { return callback(null, false); }

  // Success
  return callback(null, user, user.password);
});
</code></pre>

<p>  },
  function(params, callback) {</p>

<pre><code>// validate nonces as necessary
callback(null, true);
</code></pre>

<p>  }
));</p>

<p>...</p>

<p>exports.isAuthenticated = passport.authenticate(['digest', 'bearer'], { session : false });
```</p>

<p>We have done 3 main things here.</p>

<p>First, we required the DigestStrategy provided by the <code>passport-http</code> module.</p>

<p>Second, we told Passport to use DigestStrategy. Inside this we told it to use <code>qop: 'auth'</code> which is quality of protection along with two anonymous functions. The first function does our verification of the user and if success we call the callback and supply the user along with their password. The second anonymous function can be used to protect against replay attacks. Nonces should be validated to make sure they are not used again. You can do this by storing issued nonces and removing them as they are used. This will increase the security of your authentication.</p>

<p>Third, we updated <code>isAuthenticated</code> to use digest instead of basic.</p>

<h2>Remove hashing of passwords :(</h2>

<p>This is the part of using Digest and more specifically the implementation provided by the <code>passport-http</code> module that I like the least. You cannot store the password as a hash. You need to get to the original password in order for the authentication to work. At the very least you will want to encrypt the password. I highly advise you analyze this type of approach for your application. If you must use Digest, you may want to consider implementing your own Digest strategy or updating the existing one where you don't pass in the password in the success callback. You could instead pass in the MD5 hash of the <code>username:realm:password</code> which you have pre calculated and stored.</p>

<p>So on to the very unsafe update to our User model. Again, for the tutorial we are going to store the password in plain text. You NEVER want to do this in a real situation. You will want to look into cryptography modules such as <code>crypto</code> to do this.</p>

<p>Open up <code>models/user.js</code> and update it to look like this:</p>

<p>```javascript
// Load required packages
var mongoose = require('mongoose');</p>

<p>// Define our user schema
var UserSchema = new mongoose.Schema({
  username: {</p>

<pre><code>type: String,
unique: true,
required: true
</code></pre>

<p>  },
  password: {</p>

<pre><code>type: String,
required: true
</code></pre>

<p>  }
});</p>

<p>// Export the Mongoose model
module.exports = mongoose.model('User', UserSchema);
```</p>

<h2>Testing it out</h2>

<p>Fire up your trusted tool such as Postman and create a new user as the old ones will have hashed passwords which will not work.</p>

<p>I found using Postman to test Digest a bit unfriendly so I opted instead for curl.</p>

<p>Here is a command you can use to test your API using Digest:</p>

<p><code>tcsh
curl -v --user smith:smith --digest http://127.0.0.1:3000/api/users
</code></p>

<p>Just change the username:password to whatever you used. This command is great in curl because it will issue the intial unauthenticated request, process the reponse along with the nonce, qop, realm, etc, and finally issue another authenticated request.</p>

<p>Here is what my test looked like:</p>

<p>```tcsh
curl -v --user smith:smith --digest http://127.0.0.1:3000/api/users</p>

<ul>
<li>About to connect() to 127.0.0.1 port 3000 (#0)</li>
<li>Trying 127.0.0.1...</li>
<li>Adding handle: conn: 0x7ffb71804000</li>
<li>Adding handle: send: 0</li>
<li>Adding handle: recv: 0</li>
<li>Curl_addHandleToPipeline: length: 1</li>
<li><ul>
<li>Conn 0 (0x7ffb71804000) send_pipe: 1, recv_pipe: 0</li>
</ul>
</li>
<li>Connected to 127.0.0.1 (127.0.0.1) port 3000 (#0)</li>
<li>Server auth using Digest with user 'smith'

<blockquote><p>GET /api/users HTTP/1.1
User-Agent: curl/7.30.0
Host: 127.0.0.1:3000
Accept: <em>/</em></p>

<p>&lt; HTTP/1.1 401 Unauthorized
&lt; X-Powered-By: Express
&lt; WWW-Authenticate: Digest realm="Users", nonce="x9hR8HiV9szqnvzUU7DsS5ekfq4xNM2p", algorithm=MD5, qop="auth"
&lt; WWW-Authenticate: Bearer realm="Users"
&lt; Date: Sun, 14 Sep 2014 23:05:02 GMT
&lt; Connection: keep-alive
&lt; Transfer-Encoding: chunked
&lt;</p></blockquote></li>
<li>Ignoring the response-body</li>
<li>Connection #0 to host 127.0.0.1 left intact</li>
<li>Issue another request to this URL: 'http://127.0.0.1:3000/api/users'</li>
<li>Found bundle for host 127.0.0.1: 0x7ffb71415150</li>
<li>Re-using existing connection! (#0) with host 127.0.0.1</li>
<li>Connected to 127.0.0.1 (127.0.0.1) port 3000 (#0)</li>
<li>Adding handle: conn: 0x7ffb71804000</li>
<li>Adding handle: send: 0</li>
<li>Adding handle: recv: 0</li>
<li>Curl_addHandleToPipeline: length: 1</li>
<li><ul>
<li>Conn 0 (0x7ffb71804000) send_pipe: 1, recv_pipe: 0</li>
</ul>
</li>
<li>Server auth using Digest with user 'smith'

<blockquote><p>GET /api/users HTTP/1.1
Authorization: Digest username="smith", realm="Users", nonce="x9hR8HiV9szqnvzUU7DsS5ekfq4xNM2p", uri="/api/users", cnonce="ICAgICAgICAgICAgICAgICAgICAgIDE0MTEzMjk4NDQ=", nc=00000001, qop=auth, response="a9b8ab69c3a44c253a7834bdfe45b26d", algorithm="MD5"
User-Agent: curl/7.30.0
Host: 127.0.0.1:3000
Accept: <em>/</em></p>

<p>&lt; HTTP/1.1 200 OK
&lt; X-Powered-By: Express
&lt; Content-Type: application/json
&lt; Content-Length: 354
&lt; ETag: "-1301455500"
&lt; Date: Sun, 14 Sep 2014 23:05:02 GMT
&lt; Connection: keep-alive
&lt;</p></blockquote></li>
<li>Connection #0 to host 127.0.0.1 left intact
[...]
```</li>
</ul>


<h2>Wrap up</h2>

<p>You now have the tools needed to implement Digest authentication.</p>

<p>I still strongly caution against the use as it currently stands. I highly dislike and advise against storing passwords encrypted. It is only slightly better than plain text since it is encrypted, but it is only one step away from becoming plain text. The best is to implement your own Digest strategy so you can store your passwords in a way that they can be hashed.</p>

<p>If you have thoughts on this, please share them in the comments section.</p>

<p>I have a lot more tutorials coming so be sure to <a href="http://scottksmith.com/atom.xml">subscribe to my RSS feed</a> or <a href="https://twitter.com/scottksmith95">follow me on Twitter</a>. Also, if there are certain topics you would like me to write on, feel free to leave comments and let me know.</p>

<p>Source code for this part can be found <a href="https://github.com/scottksmith95/beerlocker/tree/master/beerlocker-5">here on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beer Locker: Building a RESTful API with Node - OAuth2 Server]]></title>
    <link href="http://scottksmith.com/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server/"/>
    <updated>2014-07-02T08:23:00-07:00</updated>
    <id>http://scottksmith.com/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server</id>
    <content type="html"><![CDATA[<p>Welcome to part 4 of the Beer Locker series</p>

<ol>
<li><a href="/blog/2014/05/02/building-restful-apis-with-node/">Getting started</a></li>
<li><a href="/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud/">CRUD</a></li>
<li><a href="/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport/">Passport</a></li>
<li><a href="/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server/">OAuth2 Server</a></li>
<li><a href="/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest/">Digest</a></li>
<li><a href="/blog/2014/09/18/beer-locker-building-a-restful-api-with-node-username-and-password/">Username &amp; Password</a></li>
</ol>


<p>In our <a href="/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport/">previous article</a> we ended wtih a functional API capable of creating user accounts, locking down API endpoints, and only allowing access to a user's own beer locker.</p>

<p>In this part we will dive into creating an OAuth2 server and allowing access to API endpoints for the authorized user or authorized applications. We will do this by integrating <a href="https://github.com/jaredhanson/oauth2orize">OAuth2orize</a> into our application.</p>

<!-- more -->


<h2>Security</h2>

<p>I realized I wasn't explicitly clear about what steps ones should take in regards to security. This article was meant more on how to get an OAuth2 server up and running. When implementing an OAuth2 server you MUST make sure to secure your application. This means running all OAuth2 endpoints over HTTPS and hashing the client secret, authorization code, and access token. All three of those values should be treated the same way you would a password for a user account. If you are unsure about how best to secure your applications, you should seek out the assistance of someone who does.</p>

<h2>Application Client</h2>

<p>The first thing we need to do is add a new model, controller, and endpoints to allow us to create new application clients. An application client is what would request access to a user account. Perhaps something like a service that wants to help manage your beer collection to notify you when you are running low.</p>

<p>Create a new file called <code>client.js</code> in the <code>models</code> directory and add the following code to it.</p>

<p>```javascript
// Load required packages
var mongoose = require('mongoose');</p>

<p>// Define our client schema
var ClientSchema = new mongoose.Schema({
  name: { type: String, unique: true, required: true },
  id: { type: String, required: true },
  secret: { type: String, required: true },
  userId: { type: String, required: true }
});</p>

<p>// Export the Mongoose model
module.exports = mongoose.model('Client', ClientSchema);
```</p>

<p>There isn't too much going on here that differs from what we already did in previous articles. We have a name to help identify the application client. The id and secret are used as part of the OAuth2 flow and should always be kept secret. In this post we aren't adding any encryption, but it would be a good practice to hash the secret at the very least. Finally we have a userId field to identify which user owns this application client.</p>

<p>You could also consider auto generating the client id and secret in order to enforce uniqueness, randomness, and strength.</p>

<p>The next thing we will add is the controller to facilitate adding and viewing application clients. Create a new file called <code>client.js</code> in the <code>controllers</code> directory and add the following code to it.</p>

<p>```javascript
// Load required packages
var Client = require('../models/client');</p>

<p>// Create endpoint /api/client for POST
exports.postClients = function(req, res) {
  // Create a new instance of the Client model
  var client = new Client();</p>

<p>  // Set the client properties that came from the POST data
  client.name = req.body.name;
  client.id = req.body.id;
  client.secret = req.body.secret;
  client.userId = req.user._id;</p>

<p>  // Save the client and check for errors
  client.save(function(err) {</p>

<pre><code>if (err)
  res.send(err);

res.json({ message: 'Client added to the locker!', data: client });
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/clients for GET
exports.getClients = function(req, res) {
  // Use the Client model to find all clients
  Client.find({ userId: req.user._id }, function(err, clients) {</p>

<pre><code>if (err)
  res.send(err);

res.json(clients);
</code></pre>

<p>  });
};
```</p>

<p>These two methods will allow us to create new application clients and get all existing ones for the authenticated user.</p>

<p>Finally, in the <code>server.js</code> file we need to require the new controller and add some new routes for the two endpoints. The new route can be added just after the <code>/users</code> route.</p>

<p>```javascript
var clientController = require('./controllers/client');</p>

<p>...</p>

<p>// Create endpoint handlers for /clients
router.route('/clients')
  .post(authController.isAuthenticated, clientController.postClients)
  .get(authController.isAuthenticated, clientController.getClients);
```</p>

<p>Using Postman, let's go ahead and create a new application client. If for some reason you forgot your password for your user, you should make a new one by posting to the /users endpoint with username and password.</p>

<p><img src="/images/postman10.png" alt="Postman" /></p>

<h2>Authenticate our application client</h2>

<p>We already created the ability to authenticate a user in our previous article using the BasicStrategy. We need to do the same here so we can lock down our token exchange endpoint which we will implement later.</p>

<p>Update the <code>controllers/auth.js</code> file to require the Client model, add a new BasicStrategy to passport, and setup an export that can be used to verify the client is authenticated.</p>

<p>```javascript
var Client = require('../models/client');</p>

<p>...</p>

<p>passport.use('client-basic', new BasicStrategy(
  function(username, password, callback) {</p>

<pre><code>Client.findOne({ id: username }, function (err, client) {
  if (err) { return callback(err); }

  // No client found with that id or bad password
  if (!client || client.secret !== password) { return callback(null, false); }

  // Success
  return callback(null, client);
});
</code></pre>

<p>  }
));</p>

<p>...</p>

<p>exports.isClientAuthenticated = passport.authenticate('client-basic', { session : false });
```</p>

<p>The one thing to note here is that when we call <code>passport.use()</code> we are not just supplying a BasicStrategy object. Instead we are also giving it the name <code>client-basic</code>. Without this, we would not be able to have two BasicStragies running at the same time.</p>

<p>The actual implementation for our new BasicStrategy is to lookup a client using the supplied client id and verify the password is correct.</p>

<h2>Authorization Codes</h2>

<p>We need to create another model that will store our authorization codes. These are the codes generated in the first part of the OAuth2 flow. These codes are then used in later steps by getting exchanged for access tokens.</p>

<p>Create a new file called <code>code.js</code> in the <code>models</code> directory and add the following code to it.</p>

<p>```javascript
// Load required packages
var mongoose = require('mongoose');</p>

<p>// Define our token schema
var CodeSchema   = new mongoose.Schema({
  value: { type: String, required: true },
  redirectUri: { type: String, required: true },
  userId: { type: String, required: true },
  clientId: { type: String, required: true }
});</p>

<p>// Export the Mongoose model
module.exports = mongoose.model('Code', CodeSchema);
```</p>

<p>It is a pretty simple model with the <code>value</code> field used to store our authorization code. <code>redirectUri</code> is there to store the redirect uri supplied in the initial authorization process so we can add a bit more security later on to make sure the token exchange is legitimate. The <code>userId</code> and <code>clientId</code> fields are used to know what user and application client own this code.</p>

<p>It is also worth noting, that to be extra secure, you should consider hashing the authorization code.</p>

<h2>Access Tokens</h2>

<p>Now we need to create the model that will store our access tokens. Access tokens are the final step in the OAuth2 process. With an access token, an application client is able to make a request on behalf of the user. We will implement the code a little later that creates and validates them.</p>

<p>Create a new file called <code>token.js</code> in the <code>models</code> directory and add the following code to it.</p>

<p>```javascript
// Load required packages
var mongoose = require('mongoose');</p>

<p>// Define our token schema
var TokenSchema   = new mongoose.Schema({
  value: { type: String, required: true },
  userId: { type: String, required: true },
  clientId: { type: String, required: true }
});</p>

<p>// Export the Mongoose model
module.exports = mongoose.model('Token', TokenSchema);
```</p>

<p>The <code>value</code> field will be of the most interest here. It is the actual token value used when accessing the API on behalf of the user. The <code>userId</code> and <code>clientId</code> fields are used to know what user and application client own this token.</p>

<p>Just like we did for user passwords, you should implement a strong hashing scheme for the access token. Never store them as plain text as we are in this example.</p>

<h2>Authentication using access tokens</h2>

<p>Earlier, we added a second BasicStrategy so we can authenticate requests from clients. Now we need to setup  a BearerStategy which will allow us to authenticate requests made on behalf of users via an OAuth token. This is done via the <code>Authorization: Bearer &lt;access token&gt;</code> header.</p>

<p>First we need to install another npm package that will provide us with the BearerStrategy for Passport.</p>

<p><code>tcsh
npm install passport-http-bearer --save
</code>
Update the <code>controllers/auth.js</code> file to require the <code>passport-http-bearer</code> package and Token model, add a new BearerStrategy to passport, and setup an export that can be used to verify the application client request is authenticated.</p>

<p>```javascript
var BearerStrategy = require('passport-http-bearer').Strategy
var Token = require('../models/token');</p>

<p>...</p>

<p>passport.use(new BearerStrategy(
  function(accessToken, callback) {</p>

<pre><code>Token.findOne({value: accessToken }, function (err, token) {
  if (err) { return callback(err); }

  // No token found
  if (!token) { return callback(null, false); }

  User.findOne({ _id: token.userId }, function (err, user) {
    if (err) { return callback(err); }

    // No user found
    if (!user) { return callback(null, false); }

    // Simple example with no scope
    callback(null, user, { scope: '*' });
  });
});
</code></pre>

<p>  }
));</p>

<p>...</p>

<p>exports.isBearerAuthenticated = passport.authenticate('bearer', { session: false });
```</p>

<p>This new strategy will allow us to accept requests from application clients using OAuth tokens and for us to validate those requests.</p>

<h2>Simple UI for granting application client access</h2>

<p>Up to this point in our series, we have not added any UI. We need to add a simple page with a form that will allow a user to grant or deny access to their account for any application client requesting access.</p>

<p>There are a lot of template engines to pick from like jade, handlebars, ejs, and more.For this series, I went with ejs.</p>

<p>First, we need to install the ejs npm package.</p>

<p><code>tcsh
npm install ejs --save
</code></p>

<p>Next, we need to update our express application to tell it to use ejs as its view engine. Add the following require and app.set statements in <code>server.js</code>.</p>

<p>```javascript
var ejs = require('ejs');</p>

<p>...</p>

<p>// Create our Express application
var app = express();</p>

<p>// Set view engine to ejs
app.set('view engine', 'ejs');
```</p>

<p>Finally, we need to create our view that will let the user grant or deny the application client access to their account.</p>

<p>Create a new directory called <code>views</code> and add a file named <code>dialog.ejs</code>.</p>

<p>Add the following code to the <code>dialog.ejs</code> file.</p>

<p>```html
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;Beer Locker&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;p&gt;Hi &lt;%= user.username %&gt;!&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;%= client.name %&gt;&lt;/b&gt; is requesting &lt;b&gt;full access&lt;/b&gt; to your account.&lt;/p&gt;
&lt;p&gt;Do you approve?&lt;/p&gt;

&lt;form action="/api/oauth2/authorize" method="post"&gt;
  &lt;input name="transaction_id" type="hidden" value="&lt;%= transactionID %&gt;"&gt;
  &lt;div&gt;
  &lt;input type="submit" value="Allow" id="allow"&gt;
  &lt;input type="submit" value="Deny" name="cancel" id="deny"&gt;
  &lt;/div&gt;
&lt;/form&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p>We will come back to this page later as we do a full walkthrough of how everything works. For now, we have this in place and can move on to the next piece.</p>

<h2>Enable sessions for our express application</h2>

<p>OAuth2orize requires session state for the express application in order to properly complete the authorization transaction. In order to do this, we need to install the express-session package.</p>

<p><code>tcsh
npm install express-session --save
</code></p>

<p>Next we need to require the package and use it in our express application.</p>

<p>Update <code>server.js</code> with the following code.</p>

<p>```javascript
var session = require('express-session');</p>

<p>...</p>

<p>// Set view engine to ejs
app.set('view engine', 'ejs');</p>

<p>// Use the body-parser package in our application
app.use(bodyParser.urlencoded({
  extended: true
}));</p>

<p>// Use express session support since OAuth2orize requires it
app.use(session({
  secret: 'Super Secret Session Key',
  saveUninitialized: true,
  resave: true
}));
```</p>

<h2>Create our OAuth2 controller</h2>

<p>We are finally ready to create our OAuth2 controller that will facilitate the OAuth2 flow.</p>

<p>First, install the oauth2orize package.</p>

<p><code>tcsh
npm install oauth2orize --save
</code></p>

<p>Next, create a new file called <code>oauth2.js</code> in the <code>controllers</code> directory. We will add the code to this file in steps.</p>

<p><strong>Load required packages</strong></p>

<p><code>javascript
// Load required packages
var oauth2orize = require('oauth2orize')
var User = require('../models/user');
var Client = require('../models/client');
var Token = require('../models/token');
var Code = require('../models/code');
</code></p>

<p><strong>Create our OAuth2 server</strong></p>

<p><code>javascript
// Create OAuth 2.0 server
var server = oauth2orize.createServer();
</code></p>

<p><strong>Register serialization and deserialization functions</strong></p>

<p>```javascript
// Register serialialization function
server.serializeClient(function(client, callback) {
  return callback(null, client._id);
});</p>

<p>// Register deserialization function
server.deserializeClient(function(id, callback) {
  Client.findOne({ _id: id }, function (err, client) {</p>

<pre><code>if (err) { return callback(err); }
return callback(null, client);
</code></pre>

<p>  });
});
```</p>

<p>When a client redirects a user to user authorization endpoint, an authorization transaction is initiated.  To complete the transaction, the user must authenticate and approve the authorization request.  Because this may involve multiple HTTP request/response exchanges, the transaction is stored in the session.</p>

<p><strong>Register authorization code grant type</strong></p>

<p>```javascript
// Register authorization code grant type
server.grant(oauth2orize.grant.code(function(client, redirectUri, user, ares, callback) {
  // Create a new authorization code
  var code = new Code({</p>

<pre><code>value: uid(16),
clientId: client._id,
redirectUri: redirectUri,
userId: user._id
</code></pre>

<p>  });</p>

<p>  // Save the auth code and check for errors
  code.save(function(err) {</p>

<pre><code>if (err) { return callback(err); }

callback(null, code.value);
</code></pre>

<p>  });
}));
```</p>

<p>OAuth 2.0 specifies a framework that allows users to grant client applications limited access to their protected resources.  It does this through a process of the user granting access, and the client exchanging the grant for an access token.</p>

<p>We are registering here for an authorization code grant type. We create a new authorization code model for the user and application client. It is then stored in MongoDB so we can access it later when exchanging for an access token.</p>

<p><strong>Exchange authorization codes for access tokens</strong></p>

<p>```javascript
// Exchange authorization codes for access tokens
server.exchange(oauth2orize.exchange.code(function(client, code, redirectUri, callback) {
  Code.findOne({ value: code }, function (err, authCode) {</p>

<pre><code>if (err) { return callback(err); }
if (authCode === undefined) { return callback(null, false); }
if (client._id.toString() !== authCode.clientId) { return callback(null, false); }
if (redirectUri !== authCode.redirectUri) { return callback(null, false); }

// Delete auth code now that it has been used
authCode.remove(function (err) {
  if(err) { return callback(err); }

  // Create a new access token
  var token = new Token({
    value: uid(256),
    clientId: authCode.clientId,
    userId: authCode.userId
  });

  // Save the access token and check for errors
  token.save(function (err) {
    if (err) { return callback(err); }

    callback(null, token);
  });
});
</code></pre>

<p>  });
}));
```</p>

<p>What we are doing here is registering for the exchange of authorization codes for access tokens. We first look up to see if we have an authorization code for the one supplied. If we do we perform validation to make sure everything is as it should be. If all is well, we remove the existing authorization code so it cannot be used again and create a new access token. This token is tied to the application client and user. It is finally saved to MongoDB.</p>

<p><strong>User authorization endpoint</strong></p>

<p>```javascript
// User authorization endpoint
exports.authorization = [
  server.authorization(function(clientId, redirectUri, callback) {</p>

<pre><code>Client.findOne({ id: clientId }, function (err, client) {
  if (err) { return callback(err); }

  return callback(null, client, redirectUri);
});
</code></pre>

<p>  }),
  function(req, res){</p>

<pre><code>res.render('dialog', { transactionID: req.oauth2.transactionID, user: req.user, client: req.oauth2.client });
</code></pre>

<p>  }
]
```</p>

<p>This endpoint, initializes a new authorization transaction. It finds the client requesting access to the user's account and then renders the <code>dialog</code> ejs view we created eariler.</p>

<p><strong>User decision endpoint</strong></p>

<p><code>javascript
// User decision endpoint
exports.decision = [
  server.decision()
]
</code></p>

<p>This endpoint is setup to handle when the user either grants or denies access to their account to the requesting application client. The <code>server.decision()</code> function handles the data submitted by the post and will call the <code>server.grant()</code> function we created earlier if the user granted access.</p>

<p><strong>Application client token exchange endpoint</strong></p>

<p><code>javascript
// Application client token exchange endpoint
exports.token = [
  server.token(),
  server.errorHandler()
]
</code></p>

<p>This endpoint is setup to handle the request made by the application client after they have been granted an authorization code by the user. The <code>server.token()</code> function will initiate a call to the <code>server.exchange()</code> function we created earlier.</p>

<p><strong>Utility functions to generate unique identifiers</strong></p>

<p>```javascript
function uid (len) {
  var buf = []</p>

<pre><code>, chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
, charlen = chars.length;
</code></pre>

<p>  for (var i = 0; i &lt; len; ++i) {</p>

<pre><code>buf.push(chars[getRandomInt(0, charlen - 1)]);
</code></pre>

<p>  }</p>

<p>  return buf.join('');
};</p>

<p>function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
```</p>

<h2>Add routes to OAuth2 endpoints</h2>

<p>Now that we have the controller made for our OAuth2 endpoints, we need to update our express application to add the necessary routes to those endpoints.</p>

<p>In <code>server.js</code> require the new oauth2 controller and add a few new routes.</p>

<p>```javascript
var oauth2Controller = require('./controllers/oauth2');</p>

<p>...</p>

<p>// Create endpoint handlers for oauth2 authorize
router.route('/oauth2/authorize')
  .get(authController.isAuthenticated, oauth2Controller.authorization)
  .post(authController.isAuthenticated, oauth2Controller.decision);</p>

<p>// Create endpoint handlers for oauth2 token
router.route('/oauth2/token')
  .post(authController.isClientAuthenticated, oauth2Controller.token);
```</p>

<h2>Access token authorization on API endpoints</h2>

<p>At this point we have everything in place for a fully functioal OAuth2 server. The last piece we need is to update our endpoints that require authorization. Currently, we are authorizing with the BasicStrategy which uses username/password. We need to update that to also allow it to use the BearerStrategy which will allow the use of the access token.</p>

<p>Change the <code>exports.isAuthenticated</code> call in <code>controllers/auth.js</code> to use either basic or bearer strategies.</p>

<p><code>javascript
exports.isAuthenticated = passport.authenticate(['basic', 'bearer'], { session : false });
</code>
We are already using the <code>isAuthenticated</code> function on our endpoints so this change will allow authorization with usernamne/password and access tokens.</p>

<h2>Let's use our OAuth2 server!</h2>

<p>That was a lot of code! Still far less than it would have been had we not used OAuth2orize.</p>

<p>Now it is time to actually try it out.</p>

<p>Open up your favorite web browser and browse to: <a href="http://localhost:3000/api/oauth2/authorize?client_id=this_is_my_id&amp;response_type=code&amp;redirect_uri=http://localhost:3000">http://localhost:3000/api/oauth2/authorize?client_id=this_is_my_id&amp;response_type=code&amp;redirect_uri=http://localhost:3000</a>. If you used a different client id, then change it in the query string. Also, if you are running on a different port, be sure to change that in both places. When prompted, enter your username and password.</p>

<p><img src="/images/browser1.png" alt="Browser" /></p>

<p>You can test it out by clicking <code>Deny</code> if you want and should see it not continue the OAuth2 flow. Go ahead and click <code>Allow</code> to continue to the next step.</p>

<p><img src="/images/browser2.png" alt="Browser" /></p>

<p>So why did we get a 404? This is part of the tutorial where we are hacking things together a bit. Normally with OAuth2 you would have an endpoint in the application requesting access to a user's account. That is the query string <code>redirect_uri</code> that we supplied. So when a user grants access, that URI is requested and passed the authorization code. This then allows the requesting application to exchange that code for an access token.</p>

<p>To continue this tutorial, we will fake an application server using Postman. Go ahead and copy the authorization code from the query string <code>code</code>. Mine in this example would be <code>S7VlbvRQW1aIC5X5</code>.</p>

<p>In Postman, we will want to POST to http://localhost:3000/api/oauth2/token, set the Basic Auth username and password to the client id and client secret for your application client, add set post data values code, grant_type, and redirect_uri. Code needs to be set the code you copied from the browser request. Grant_type needs to be set to authorization_code because that is the type we are using. Redirect_uri needs to be set to the same redirect_uri you used in the authorization code request.</p>

<p><img src="/images/postman11.png" alt="Postman" /></p>

<p>See that <code>value</code> field in the response <code>access_token</code> object? That is our access token which we can now use to make API requests on behalf of the user!</p>

<p>Let's test our access token by making a request to our API endpoints.</p>

<p>All you have to do is make GET, POST, PUT, or DELETE requests to the API endpoints we made in earlier tutorials. The only difference is you don't have to supply a username or password. Instead, you will add an Authorization header with the value set to <code>Bearer &lt;access token&gt;</code></p>

<p><strong>Add beer to the user's locker</strong>
<img src="/images/postman12.png" alt="Postman" /></p>

<p><strong>Get beer from the user's locker</strong>
<img src="/images/postman13.png" alt="Postman" /></p>

<p>Feel free to play around a bit. You should be able to alter the access token and find you are unauthorized. Switch back to username and password to verify the user still has access.</p>

<h2>Wrap up</h2>

<p>You now have a fully functional OAuth2 server done with just a little bit of work. <a href="https://github.com/jaredhanson/oauth2orize">OAuth2orize</a> is an amazing library that makes building our server very straightfoward.</p>

<p>I have a lot more tutorials coming so be sure to <a href="http://scottksmith.com/atom.xml">subscribe to my RSS feed</a> or <a href="https://twitter.com/scottksmith95">follow me on Twitter</a>. Also, if there are certain topics you would like me to write on, feel free to leave comments and let me know.</p>

<p>Source code for this part can be found <a href="https://github.com/scottksmith95/beerlocker/tree/master/beerlocker-4">here on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beer Locker: Building a RESTful API with Node - Passport]]></title>
    <link href="http://scottksmith.com/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport/"/>
    <updated>2014-05-29T10:47:00-07:00</updated>
    <id>http://scottksmith.com/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport</id>
    <content type="html"><![CDATA[<p>Welcome to part 3 of the Beer Locker series</p>

<ol>
<li><a href="/blog/2014/05/02/building-restful-apis-with-node/">Getting started</a></li>
<li><a href="/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud/">CRUD</a></li>
<li><a href="/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport/">Passport</a></li>
<li><a href="/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server/">OAuth2 Server</a></li>
<li><a href="/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest/">Digest</a></li>
<li><a href="/blog/2014/09/18/beer-locker-building-a-restful-api-with-node-username-and-password/">Username &amp; Password</a></li>
</ol>


<p>In our <a href="/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud/">previous article</a> we ended wtih a fairly functional API capable of adding, removing, updating, and viewing beer.</p>

<p>In this part we will dive into creating user accounts and authentication using <a href="http://passportjs.org/">Passport</a>. By the end of this article you will have learned how to add user accounts, implement authentication, and control access to beer lockers.</p>

<!-- more -->


<h2>Passport</h2>

<p>So what is Passport? Here is the official description from their site:</p>

<p><em>"Passport is authentication middleware for Node.js. Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based web application. A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more."</em></p>

<p>What this means is that Passport is middleware that can be added to the Express just like we did for the <code>body-parser</code> package with <code>app.use()</code>.</p>

<p>Some of the great features provided by Passport are:</p>

<ul>
<li>140+ authentication strategies</li>
<li>Single sign-on with OpenID and OAuth</li>
<li>Easily handle success and failure</li>
<li>Supports persistent sessions</li>
<li>Dynamic scope and permissions</li>
<li>Pick and choose required strategies</li>
<li>Implement custom strategies</li>
<li>Does not mount routes in application</li>
<li>Lightweight code base</li>
</ul>


<h3>Authentication Strategies</h3>

<p>As of writing this blog post, Passport has 140+ authenication strategies available for use in your application.</p>

<p>What these strategies provide are nicely encapsulated npm packages that abstract out some of the complexities with intergrating OAuth or OpenID for API services like Twitter, Facebook, Google, etc.</p>

<p>You can find the full list <a href="http://passportjs.org/guide/providers/">here</a>.</p>

<p>For this tutorial we will be using the <a href="https://github.com/jaredhanson/passport-http">Basic strategy</a> to support Basic Authentication in the calls to our API endpoints.</p>

<h2>Clean Up</h2>

<p>We need to do a bit of code cleanup and restructuring before continuing otherwise our codebase will become very messy and hard to follow.</p>

<p>You can find the udpated version of the code <a href="https://github.com/scottksmith95/beerlocker/tree/master/beerlocker-3.1">here on GitHub</a>.</p>

<p>If you would like to make the changes yourself, create a new folder in your application called <code>controllers</code> and add a new file <code>beer.js</code> to that folder with the following code:</p>

<p>```javascript
// Load required packages
var Beer = require('../models/beer');</p>

<p>// Create endpoint /api/beers for POSTS
exports.postBeers = function(req, res) {
  // Create a new instance of the Beer model
  var beer = new Beer();</p>

<p>  // Set the beer properties that came from the POST data
  beer.name = req.body.name;
  beer.type = req.body.type;
  beer.quantity = req.body.quantity;</p>

<p>  // Save the beer and check for errors
  beer.save(function(err) {</p>

<pre><code>if (err)
  res.send(err);

res.json({ message: 'Beer added to the locker!', data: beer });
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers for GET
exports.getBeers = function(req, res) {
  // Use the Beer model to find all beer
  Beer.find(function(err, beers) {</p>

<pre><code>if (err)
  res.send(err);

res.json(beers);
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers/:beer_id for GET
exports.getBeer = function(req, res) {
  // Use the Beer model to find a specific beer
  Beer.findById(req.params.beer_id, function(err, beer) {</p>

<pre><code>if (err)
  res.send(err);

res.json(beer);
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers/:beer_id for PUT
exports.putBeer = function(req, res) {
  // Use the Beer model to find a specific beer
  Beer.findById(req.params.beer_id, function(err, beer) {</p>

<pre><code>if (err)
  res.send(err);

// Update the existing beer quantity
beer.quantity = req.body.quantity;

// Save the beer and check for errors
beer.save(function(err) {
  if (err)
    res.send(err);

  res.json(beer);
});
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers/:beer_id for DELETE
exports.deleteBeer = function(req, res) {
  // Use the Beer model to find a specific beer and remove it
  Beer.findByIdAndRemove(req.params.beer_id, function(err) {</p>

<pre><code>if (err)
  res.send(err);

res.json({ message: 'Beer removed from the locker!' });
</code></pre>

<p>  });
};
```</p>

<p>Next, you will need to udpate <code>server.js</code> as follows:</p>

<p>```javascript
// Load required packages
var express = require('express');
var mongoose = require('mongoose');
var bodyParser = require('body-parser');
var beerController = require('./controllers/beer');</p>

<p>// Connect to the beerlocker MongoDB
mongoose.connect('mongodb://localhost:27017/beerlocker');</p>

<p>// Create our Express application
var app = express();</p>

<p>// Use the body-parser package in our application
app.use(bodyParser.urlencoded({
  extended: true
}));</p>

<p>// Create our Express router
var router = express.Router();</p>

<p>// Create endpoint handlers for /beers
router.route('/beers')
  .post(beerController.postBeers)
  .get(beerController.getBeers);</p>

<p>// Create endpoint handlers for /beers/:beer_id
router.route('/beers/:beer_id')
  .get(beerController.getBeer)
  .put(beerController.putBeer)
  .delete(beerController.deleteBeer);</p>

<p>// Register all our routes with /api
app.use('/api', router);</p>

<p>// Start the server
app.listen(3000);
```</p>

<h2>User Model</h2>

<p>The first thing we will need is a model to store our user. This model will be created similarly to the Beer model we made before. Inside the <code>models</code> folder, create a file named <code>user.js</code> and add the following code to it.</p>

<p>```javascript
// Load required packages
var mongoose = require('mongoose');
var bcrypt = require('bcrypt-nodejs');</p>

<p>// Define our user schema
var UserSchema = new mongoose.Schema({
  username: {</p>

<pre><code>type: String,
unique: true,
required: true
</code></pre>

<p>  },
  password: {</p>

<pre><code>type: String,
required: true
</code></pre>

<p>  }
});</p>

<p>// Execute before each user.save() call
UserSchema.pre('save', function(callback) {
  var user = this;</p>

<p>  // Break out if the password hasn't changed
  if (!user.isModified('password')) return callback();</p>

<p>  // Password changed so we need to hash it
  bcrypt.genSalt(5, function(err, salt) {</p>

<pre><code>if (err) return callback(err);

bcrypt.hash(user.password, salt, null, function(err, hash) {
  if (err) return callback(err);
  user.password = hash;
  callback();
});
</code></pre>

<p>  });
});</p>

<p>// Export the Mongoose model
module.exports = mongoose.model('User', UserSchema);
```</p>

<p>You will also need to install the <code>bcrypt-nodejs</code> package so we can properly hash out password as we should never store passwords in plain text.</p>

<p><code>tcsh
npm install bcrypt-nodejs --save
</code></p>

<p>The <code>UserSchema</code> we just created has some similarities to our BeerSchema. You will notice that our fields have an object definding their properties such as type, unique, and required. This allows us to better control with is allowed and required in our models.</p>

<p>We have also added a hook to be called before each call to save() on our User model. This will allow us to check to see if the password has changed. If it has changed, we can then hash it and stored the hash in the model and MongoDB.</p>

<h2>User Controller</h2>

<p>Now that we have a model to store our user in, we need to make another controller in order to add and view users. The view users implementation will be helpful for this tutorial, but is something you should consider not doing for applications you create. You don't want to provide a list of all usernames nor do you want to expose the hashed passwords.</p>

<p>In the <code>controllers</code> directory, create a new filed called <code>user.js</code>. Add the following code to this file.</p>

<p>```javascript
// Load required packages
var User = require('../models/user');</p>

<p>// Create endpoint /api/users for POST
exports.postUsers = function(req, res) {
  var user = new User({</p>

<pre><code>username: req.body.username,
password: req.body.password
</code></pre>

<p>  });</p>

<p>  user.save(function(err) {</p>

<pre><code>if (err)
  res.send(err);

res.json({ message: 'New beer drinker added to the locker room!' });
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/users for GET
exports.getUsers = function(req, res) {
  User.find(function(err, users) {</p>

<pre><code>if (err)
  res.send(err);

res.json(users);
</code></pre>

<p>  });
};
```</p>

<p>With our controller in place, we need to define our routes so that we can add and view users by making calls to our API. In the <code>server.js</code> file, update the code to require the new controller and include the new routes.</p>

<p>```javascript
// Load required packages
...
var userController = require('./controllers/user');</p>

<p>...</p>

<p>// Create endpoint handlers for /users
router.route('/users')
  .post(userController.postUsers)
  .get(userController.getUsers);
```</p>

<p>You should now be able to fire up your trusty Postman application and make POST and GET calls to <a href="http://localhost:3000/api/users">http://localhost:3000/api/users</a>. For the POST, be sure to include username and password in order to create a new user.</p>

<h2>Auth Controller</h2>

<p><code>tcsh
npm install passport --save
npm install passport-http --save
</code></p>

<p>This will install the standard passport package along with passport-http. Passport-http will provide our API HTTP Basic and Digest authentication strategies.</p>

<p>Before we make our auth controller, we need to update our User model to add a function capable of verifying a password in order to authenticate calls to the API. Update your <code>user.js</code> model.</p>

<p>```javascript
...</p>

<p>UserSchema.methods.verifyPassword = function(password, cb) {
  bcrypt.compare(password, this.password, function(err, isMatch) {</p>

<pre><code>if (err) return cb(err);
cb(null, isMatch);
</code></pre>

<p>  });
};</p>

<p>// Export the Mongoose model
module.exports = mongoose.model('User', UserSchema);
```</p>

<p>Now we can create our auth controller which will manage authentication for our API endpoints. In the <code>controllers</code> directory, add a file <code>auth.js</code> with the following contents.</p>

<p>```javascript
// Load required packages
var passport = require('passport');
var BasicStrategy = require('passport-http').BasicStrategy;
var User = require('../models/user');</p>

<p>passport.use(new BasicStrategy(
  function(username, password, callback) {</p>

<pre><code>User.findOne({ username: username }, function (err, user) {
  if (err) { return callback(err); }

  // No user found with that username
  if (!user) { return callback(null, false); }

  // Make sure the password is correct
  user.verifyPassword(password, function(err, isMatch) {
    if (err) { return callback(err); }

    // Password did not match
    if (!isMatch) { return callback(null, false); }

    // Success
    return callback(null, user);
  });
});
</code></pre>

<p>  }
));</p>

<p>exports.isAuthenticated = passport.authenticate('basic', { session : false });
```</p>

<p>What we are doing here is setting up passport to use the Basic authentication stategy provided by the passport-http package. For our BasicStrategy, we are defining a callback that will attempt to look up the user using the provided username and if found see if the password is correct. If all works well, it will call the callback method and provide the found user.</p>

<p>The final piece of this is exporting the <code>isAuthenticated</code> function which tells passport to authenticate using our BasicStrategy. The option of session being set to false tells passport to not store session variables between calls to our API. This forces the user to submit the username and password on each call.</p>

<p>The last piece is to update our <code>server.js</code> file to include the passport package, initialize it with our express app, and call the <code>isAuthenticated</code> function for each call to our API. Open up <code>server.js</code> and update it as follows.</p>

<p>```javascript
// Load required packages
...
var passport = require('passport');
var authController = require('./controllers/auth');</p>

<p>// Connect to the beerlocker MongoDB
mongoose.connect('mongodb://localhost:27017/beerlocker');</p>

<p>// Create our Express application
var app = express();</p>

<p>// Use the body-parser package in our application
app.use(bodyParser.urlencoded({
  extended: true
}));</p>

<p>// Use the passport package in our application
app.use(passport.initialize());</p>

<p>// Create our Express router
var router = express.Router();</p>

<p>// Create endpoint handlers for /beers
router.route('/beers')
  .post(authController.isAuthenticated, beerController.postBeers)
  .get(authController.isAuthenticated, beerController.getBeers);</p>

<p>// Create endpoint handlers for /beers/:beer_id
router.route('/beers/:beer_id')
  .get(authController.isAuthenticated, beerController.getBeer)
  .put(authController.isAuthenticated, beerController.putBeer)
  .delete(authController.isAuthenticated, beerController.deleteBeer);</p>

<p>// Create endpoint handlers for /users
router.route('/users')
  .post(userController.postUsers)
  .get(authController.isAuthenticated, userController.getUsers);</p>

<p>...
```</p>

<p>What we have done here, is insert the <code>isAuthenticated</code> funtion in the callback chain for our endpoint handlers. If a call is made to any of these endpoints without a valid username and password, the request will be denied with a 401 HTTP response.</p>

<p>If you haven't already created a user, go ahead and create one now by posting to <a href="http://localhost:3000/api/users">http://localhost:3000/api/users</a> and remember your username and password.</p>

<p>Now you can make a call to any of the endpoints we defined that call the <code>isAuthenticated</code> function to test that your authentication is working. If you are using Postman, you can use the Basic Auth tab towards the top to enter your username and password. Postman will then automatically create the Authorization header and value for you.</p>

<p>Here is a screenshot of me adding some beer to the locker with valid credentials.</p>

<p><img src="/images/postman7.png" alt="Postman" /></p>

<p>Here is a screenshot of me trying to add beer with an invalid username.</p>

<p><img src="/images/postman8.png" alt="Postman" /></p>

<p>Here is a screenshot of me trying to add beer with an invalid password.</p>

<p><img src="/images/postman9.png" alt="Postman" /></p>

<h2>Hey, that is my beer!</h2>

<p>We now have the ability to require authentication for calls to our API. We still need a way to make sure when beer is added, removed, etc that it is done for the authenticated user.</p>

<p>The first thing we need to do is add a field to our Beer model to store the id of the user that owns it. Update your Beer model in the <code>beer.js</code> file.</p>

<p>```javascript
// Load required packages
var mongoose = require('mongoose');</p>

<p>// Define our beer schema
var BeerSchema   = new mongoose.Schema({
  name: String,
  type: String,
  quantity: Number,
  userId: String
});</p>

<p>// Export the Mongoose model
module.exports = mongoose.model('Beer', BeerSchema);
```</p>

<p>Now that our model can store a user id, we need to update our Beer endpoint handlers to set the id when adding and query with the id when getting, updating, and deleting. Open up the <code>beer.js</code> file in the <code>controllers</code> directory and update it to the following code.</p>

<p>```javascript
// Load required packages
var Beer = require('../models/beer');</p>

<p>// Create endpoint /api/beers for POST
exports.postBeers = function(req, res) {
  // Create a new instance of the Beer model
  var beer = new Beer();</p>

<p>  // Set the beer properties that came from the POST data
  beer.name = req.body.name;
  beer.type = req.body.type;
  beer.quantity = req.body.quantity;
  beer.userId = req.user._id;</p>

<p>  // Save the beer and check for errors
  beer.save(function(err) {</p>

<pre><code>if (err)
  res.send(err);

res.json({ message: 'Beer added to the locker!', data: beer });
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers for GET
exports.getBeers = function(req, res) {
  // Use the Beer model to find all beer
  Beer.find({ userId: req.user._id }, function(err, beers) {</p>

<pre><code>if (err)
  res.send(err);

res.json(beers);
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers/:beer_id for GET
exports.getBeer = function(req, res) {
  // Use the Beer model to find a specific beer
  Beer.find({ userId: req.user.<em>id, </em>id: req.params.beer_id }, function(err, beer) {</p>

<pre><code>if (err)
  res.send(err);

res.json(beer);
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers/:beer_id for PUT
exports.putBeer = function(req, res) {
  // Use the Beer model to find a specific beer
  Beer.update({ userId: req.user.<em>id, </em>id: req.params.beer_id }, { quantity: req.body.quantity }, function(err, num, raw) {</p>

<pre><code>if (err)
  res.send(err);

res.json({ message: num + ' updated' });
</code></pre>

<p>  });
};</p>

<p>// Create endpoint /api/beers/:beer_id for DELETE
exports.deleteBeer = function(req, res) {
  // Use the Beer model to find a specific beer and remove it
  Beer.remove({ userId: req.user.<em>id, </em>id: req.params.beer_id }, function(err) {</p>

<pre><code>if (err)
  res.send(err);

res.json({ message: 'Beer removed from the locker!' });
</code></pre>

<p>  });
};
```</p>

<p>One of the great things about passport is that it will automatically set the authenticated user in the <code>req.user</code> object. This allows us to easily get ahold of the user id in order to set it when adding beer to our locker. You can see in the <code>postBeers()</code> function we are setting the <code>userId</code> to <code>req.user._id</code>.</p>

<p>The other 4 endpoints have had their <code>find()</code>, <code>update()</code>, and <code>remove()</code> functions updated to pass in the <code>userId</code> in order to control which beer we can get, update and delete.</p>

<h2>Wrap up</h2>

<p>You can now add multiple users, have each user add, remove, update, and get their own beer without the fear of anyone else getting into their stash! Up next will dive into allowing others to access our locker via OAuth powered by <a href="https://github.com/jaredhanson/oauth2orize">OAuth2orize</a>.</p>

<p>Source code for this part can be found <a href="https://github.com/scottksmith95/beerlocker/tree/master/beerlocker-3.2">here on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beer Locker: Building a RESTful API with Node - CRUD]]></title>
    <link href="http://scottksmith.com/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud/"/>
    <updated>2014-05-05T12:48:00-07:00</updated>
    <id>http://scottksmith.com/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud</id>
    <content type="html"><![CDATA[<p>Welcome to part 2 of the Beer Locker series</p>

<ol>
<li><a href="/blog/2014/05/02/building-restful-apis-with-node/">Getting started</a></li>
<li><a href="/blog/2014/05/05/beer-locker-building-a-restful-api-with-node-crud/">CRUD</a></li>
<li><a href="/blog/2014/05/29/beer-locker-building-a-restful-api-with-node-passport/">Passport</a></li>
<li><a href="/blog/2014/07/02/beer-locker-building-a-restful-api-with-node-oauth2-server/">OAuth2 Server</a></li>
<li><a href="/blog/2014/09/14/beer-locker-building-a-restful-api-with-node-digest/">Digest</a></li>
<li><a href="/blog/2014/09/18/beer-locker-building-a-restful-api-with-node-username-and-password/">Username &amp; Password</a></li>
</ol>


<p>In our <a href="/blog/2014/05/02/building-restful-apis-with-node/">previous article</a> we left off with a basic Node applicaton in place capable of accepting HTTP requests and responding back with some static JSON.</p>

<p>In this part we will dive a bit deeper and learn how to implement CRUD operations on our beer locker. By the end of this article you will have learned how to connect to a MongoDB, used Mongoose for object modeling, and have implemented GET, PUT, POST, and DELETE endpoints.</p>

<!-- more -->


<h2>Connecting to MongoDB</h2>

<p>If you don't already have MondgoDB installed and running, you will want to go their <a href="https://www.mongodb.org/">official site</a> and follow their installation instructions.</p>

<p>There are three things we need to do to connect to our MongoDB.</p>

<ol>
<li>Install the Mongoose package</li>
<li>Load the Mongoose package</li>
<li>Connect to it useing our connection string</li>
</ol>


<p>Install the package manually using the following command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install mongoose --save</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Update the code in <code>server.js</code> from our previous article to look like the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Load required packages</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Connect to the MongoDB</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Load required packages</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Connect to the beerlocker MongoDB</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost:27017/beerlocker&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If all goes well, your application should start up just fine.</p>

<h2>Create our first model - BEER</h2>

<p>Go ahead and create the JavaScript file that will hold our beer model.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>beerlocker/
</span><span class='line'>  models/         // holds our models&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>beer.js
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Add the following code to the newly created file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Load required packages</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Define our beer schema</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">BeerSchema</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">quantity</span><span class="o">:</span> <span class="nb">Number</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Export the Mongoose model</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Beer&#39;</span><span class="p">,</span> <span class="nx">BeerSchema</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So what is going on here?</p>

<ol>
<li>We loaded the Mongoose package</li>
<li>Created a Mongoose schema which maps to a MongoDB collection and defines the shape of the documents within that collection.</li>
<li>We defined our schema to contain 2 strings and 1 number.</li>
<li>We exported the Mongoose beer model for use within our application.</li>
</ol>


<p>The last step is to load this new beer model in our <code>server.js</code> file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Load required packages</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Beer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./models/beer&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Get ready to accept data via POST or PUT</h2>

<p>In order to accept data via POST or PUT, we need to add another package called body-parser.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install body-parser --save</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Load the body-parser package in our code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Load required packages</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Beer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./models/beer&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And finally, we need to use this package with our Express application.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create our Express application</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Use the body-parser package in our application</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">extended</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Add some beer to our beer locker</h2>

<p>The moment we have all been waiting for is here. We are now going to implement the means to add beer to our locker!</p>

<p>Let's add this code to our <code>server.js</code> file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Initial dummy route for testing</span>
</span><span class='line'><span class="c1">// http://localhost:3000/api</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;You are running dangerously low on beer!&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// -- New Code Below Here -- //&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Create a new route with the prefix /beers</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">beersRoute</span> <span class="o">=</span> <span class="nx">router</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;/beers&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Create endpoint /api/beers for POSTS</span>
</span><span class='line'><span class="nx">beersRoute</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Create a new instance of the Beer model</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">beer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Beer</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Set the beer properties that came from the POST data</span>
</span><span class='line'>  <span class="nx">beer</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">beer</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">beer</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">quantity</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Save the beer and check for errors</span>
</span><span class='line'>  <span class="nx">beer</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Beer added to the locker!&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="nx">beer</span> <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What we are doing here is creating a new route with the prefix '/beers' and then setting up what to do when we POST to that endpoint. In this case we create a new Beer model, set its properties to those passed in as data in the POST, and call save on the Beer model which is a Mongoose function that will save the model to the MongoDB database.</p>

<p>Fire up Postman and test is out. Make sure to switch the data type to <code>x-www-form-urlencoded</code>. You will want to add 3 key value pairs for name, type, and quantity, choose POST as the method, and enter the URL http://localhost:3000/api/beers.</p>

<p><img src="/images/postman3.png" alt="Postman" /></p>

<h2>Party time, let's get all the beer!</h2>

<p>Getting all our beer is pretty simple. We implement it in a similar fashion as we did for POST. Add the following code to <code>server.js</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create endpoint /api/beers for POSTS</span>
</span><span class='line'><span class="nx">beersRoute</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// -- New Code Below Here -- //&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Create endpoint /api/beers for GET</span>
</span><span class='line'><span class="nx">beersRoute</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Use the Beer model to find all beer</span>
</span><span class='line'>  <span class="nx">Beer</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">beers</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">beers</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What we are doing here is creating a new route to the prefix '/beers' and then setting up what to do when we make a GET request to that endpoint. In this case we use the Mongoose Beer model to call find which will query the MongoDB database and return all our beer.</p>

<p>Fire up Postman and test it out by making a GET request to http://localhost:3000/api/beers. If everything is working fine, you should get back all the beer you have added.</p>

<h2>Pace yourself with a single beer</h2>

<p>We really don't want to drink all of our beer at once, so we need a way to get out a single beer.</p>

<p>Time to update <code>server.js</code> again.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create endpoint /api/beers for GET</span>
</span><span class='line'><span class="nx">beersRoute</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// -- New Code Below Here -- //&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Create a new route with the /beers/:beer_id prefix</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">beerRoute</span> <span class="o">=</span> <span class="nx">router</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;/beers/:beer_id&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Create endpoint /api/beers/:beer_id for GET</span>
</span><span class='line'><span class="nx">beerRoute</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Use the Beer model to find a specific beer</span>
</span><span class='line'>  <span class="nx">Beer</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">beer_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">beer</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">beer</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Because we are wanting to request a single beer, we needed to implement a new route. This new route contains the id of the beer we want <code>/api/beers/:beer_id'</code>. With this new route, we then setup what to do when it is called with a GET. We end up using the Mongoose Beer model function <code>findById()</code> and pass in the <code>beer_id</code> parameter to look up the requested beer.</p>

<p>To test this out, make a request to your API and get out all of your beer. Pick out an id from one that you want to request individually. Finally using Postman you can make a request to <code>http://localhost:3000/api/beers/:beer_id</code> and replace <code>:beer_id</code> with your id.</p>

<p><img src="/images/postman4.png" alt="Postman" /></p>

<h2>Updating the quantity for beers we just drank</h2>

<p>We are now pulling beers out of our locker. For each beer we remove, we need to update our quantity so we know how many we have left. This can be done by implementing support for the PUT method.</p>

<p>You guessed it, let's update the <code>server.js</code> file again.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create endpoint /api/beers/:beer_id for GET</span>
</span><span class='line'><span class="nx">beerRoute</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// -- New Code Below Here -- //&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Create endpoint /api/beers/:beer_id for PUT</span>
</span><span class='line'><span class="nx">beerRoute</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Use the Beer model to find a specific beer</span>
</span><span class='line'>  <span class="nx">Beer</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">beer_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">beer</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Update the existing beer quantity</span>
</span><span class='line'><span class="nx">beer</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">quantity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Save the beer and check for errors</span>
</span><span class='line'><span class="nx">beer</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">beer</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just like we did for getting a single beer, we used the same route but implemented functionality to handle PUT requests. We lookup the beer the same way, update its quantity, and then save it back to MongoDB.</p>

<p>Using the same URL you used to GET a single beer, update Postman to use PUT, set data type to <code>x-www-form-urlencoded</code>, and add a key value pair quantity set to whatever number you want.</p>

<p>You should get back a response with the beer object's quantity updated.</p>

<p><img src="/images/postman5.png" alt="Postman" /></p>

<h2>I just drank my last beer!</h2>

<p>Sometimes, we drink the last beer. In this case, updating the quantity to 0 isn't appropriate. What we need is the ability to delete the beer entirely.</p>

<p>This can be accomplished by implementing functionality to support DELETE requests to our endpoint we used for GET and PUT.</p>

<p>Update <code>server.js</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create endpoint /api/beers/:beer_id for PUT</span>
</span><span class='line'><span class="nx">beerRoute</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// -- New Code Below Here -- //&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Create endpoint /api/beers/:beer_id for DELETE</span>
</span><span class='line'><span class="nx">beerRoute</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Use the Beer model to find a specific beer and remove it</span>
</span><span class='line'>  <span class="nx">Beer</span><span class="p">.</span><span class="nx">findByIdAndRemove</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">beer_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Beer removed from the locker!&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just like our PUT, DELETE uses the id passed in. We then use the Mongoose <code>findByIdAndRemove</code> function to find and delete our object. Update Postman to use DELETE instead of PUT and send the request.</p>

<p><img src="/images/postman6.png" alt="Postman" /></p>

<p>You should now be able to switch the method to GET and receive and error since the object with that id no longer exists.</p>

<h2>Wrap up</h2>

<p>We have now implemented full CRUD on our Beer Locker. Up next will be diving into creating user accounts and authenticaion using <a href="http://passportjs.org/">Passport</a>.</p>

<p>Source code for this part can be found <a href="https://github.com/scottksmith95/beerlocker/tree/master/beerlocker-2">here on GitHub</a>.</p>
]]></content>
  </entry>
  
</feed>
